{
	"head": "Ericwyn's Blog",
	"introduce": "Coding myself",
	"github": "http://github.com/Ericwyn",
	"mail": "Coding myself",
	"domain": "https://blog.meetwhy.com",
	"articles": [
		{
			"title": "iMCPortal-连接过程解析及Golang实现",
			"tag": "且听秋谷,Golang,爬虫",
			"create": "2018-07-18 16:45",
			"update": "2018-07-19 22:43",
			"mini": " 0 前言  最近学校之前开通了 iMC Portal 无线网络, 只是每次都要开启浏览器才可以登录, 并且需要一直开着一个标签, 这是件很麻烦的事情, 而且最近 (20180711) 发现会出现每隔 15 分钟就断线一次的问题, 所以希望通过抓包来了解连接的过程,之后使用 java 或者其他语言实现模拟登录, 并且在断线之后自动重连   1 协议解析  1.1 获取 cookie 访问学校 iMC portal 页面之后会发现有以下的一些页面请求  ![](http://ww1.sinaimg.cn/large/ae1a7c45gy1ftfjvp7kftj20t20dqmzl.jpg)  e",
			"link": "iMCPortal"
		},
		{
			"title": "Norcia文档",
			"tag": "且听秋谷,Norcia",
			"create": "2018-05-22 20:25",
			"update": "2018-05-22 20:25",
			"mini": " Norcia 一个简单的静态博客框架   项目结构   根目录下的 HTML \\ CSS \\ JavaScript 文件   `document` 文件夹用来存放博文 markdown 文件   config.json 作为静态博客的配置文件以及博客文章索引,该文件在初次设定好个人信息后可由 Norcia 程序自动更新与维护, 详情请看下文介绍    config.json 自动更新  更新 运行 Norcia 程序就可以自动依照 document 文件夹里面的 markdown 文件的修改, 而自动维护更新 config.json 索引了  Norcia 为以下三个平台提供打包好的二进制程",
			"link": "norcia-document"
		},
		{
			"title": "markdown测试文档",
			"tag": "且听秋谷,Norcia",
			"create": "2018-05-21 19:02",
			"update": "2018-05-23 15:31",
			"mini": " 前言 这是一份Markdown 测试文档，用来测试 Norcia 对 markdown 文件的加载和显示   主要内容   Markdown是什么？   谁创造了它？   为什么要使用它？   怎么使用？   谁在用？   尝试一下   正文  1. Markdown是什么？ Markdown是一种轻量级标记语言，它以纯文本形式(*易读、易写、易更改*)编写文档，并最终以HTML格式发布。     Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。       2. 谁创造了它？ 它由[Aaron Swartz](http://www.aaronsw.c",
			"link": "markdown-test"
		},
		{
			"title": "毕业惜别自题四首",
			"tag": "古月言说",
			"create": "2018-04-23 19:52",
			"update": "2018-07-19 22:16",
			"mini": " 序 16年中时候某天中午看到他们搬校区，又看到公众号上写满离愁别恨，那时候还年轻所以也不知道什么，只是就着假想的离别心情写了几行字，这就是第一首诗的由来。眨眼间却忽然发现已经到了自己的师兄毕业和离开的时候了。   其（一）           淅水荷花今又红                   年华易逝总匆匆                   只欲为君折赠远                   相逢仍记旧音容   其（二）           骊歌今日对苍穹                   而后青山隔万重                   杯酒浮沉且饮尽               ",
			"link": "graduate-1804"
		},
		{
			"title": "Markmobi开发记录",
			"tag": "且听秋谷",
			"create": "2018-04-05 16:34",
			"update": "2018-05-23 14:44",
			"mini": " 前言 自己使用 Kindle 已经有好几年的历史了，从高中时期看各种古文，后来一口气的看一大堆小说，再到后来看看一些技术书籍，而最近发现 Kindle 的另外一个用处就是看 Github 上面的一些电子书籍。  Github 上面是有很多的技术书籍的，因为 Github 有着开放和包容的特性，所以很多的人会翻译各种技术专业的文档或者相关的书，并变成一个 repo ，后续不断更新和提交。从这看来，Github 其实像是一个大的书库。另外哪怕不是书籍，Github 上面也有很多可能并不太适合在电脑上面阅读的 README，以及那种超长的那种项目文档。某天我翻阅的时候，忽然发现或许拿 Kindle",
			"link": "Markmobi"
		},
		{
			"title": "腾讯云CVM安装Win10",
			"tag": "且听秋谷",
			"create": "2018-03-14 22:12",
			"update": "2018-05-23 15:24",
			"mini": "前言 遇到一个奇怪的需求,某个软件只能在win10上面运行,而在win server 环境下会迷幻出错,本身租用了一台腾讯云CVM 想着拿来做运算,结果gg了,无奈之下只能尝试安装系统为 Win10.这里吐槽一下,为毛各个云服务器厂商就是不提供win10系统呢(难道是因为要付费么   准备工作   你的CVM 必须是安装了 windows server 某个版本的(推荐2016版本,毕竟与win10 同一世代   在腾讯云上下载了 win10 的安装镜像iso   备份了驱动     这里额外说一下驱动备份,起初我天真地认为 驱动精灵就能够解决,后面发现驱动精灵居然不支持server 系统..",
			"link": "install-win10-in-tencent-cvm"
		},
		{
			"title": "使用Jitpack发布Github项目",
			"tag": "且听秋谷",
			"create": "2018-02-10 17:24",
			"update": "2018-05-23 15:22",
			"mini": " 前言 使用 Jitpack 能够很方便的把自己一些 java 的库打包成 jar 发布，并且可以在新项目当中使用 maven 引入，实在是很方便，以下是我一些关于 使用 Jitpack 发布 Github 项目的实践   IDE   intellij IDEA   gradle      gradle install  然后会看到生成的`.gradle`文件夹   gradle.build  在项目根目录下新建一个 `gradle.build`文件，基础配置如下      //配置 java plugin     apply plugin: 'java'     //配置生成的jar 名称和",
			"link": "jitpack-use"
		},
		{
			"title": "R package 打包记录",
			"tag": "R语言,且听秋谷",
			"create": "2017-10-13 18:15",
			"update": "2018-05-23 15:27",
			"mini": " 设定工作文件目录 打包R package 要求两个目录 分别是    工作目录 （存放 R 代码）          mkdir /home/ericwyn/work            包目录 （存放包）          mkdir /home/ericwyn/Rlibs    默认情况下在mydir是找不到mylib下的包的，因为mylib不在包的搜索路径里，解决这个问题只需要在mydir新建一个文 件`.Rprofile`文件，里面写上：`.liblinks(“/home/wentrue/Rlibs”)`即可。这样在mydir运行R脚本或启动R终 端，mylib就会被添加到包搜索路",
			"link": "auto-package-of-r"
		},
		{
			"title": "Ubuntu Server 14.04 安装状态监控Linux Dash",
			"tag": "Server,且听秋谷",
			"create": "2017-06-16 19:49",
			"update": "2018-05-23 18:48",
			"mini": " 介绍 Linux Dash是一款非常简单的服务器监控程序，可以通过python、php以及LAMP部署运行，此次安装的环境是Ubuntu Server 14.04 LTS,使用Linux Dash的版本是github上面一个同学的2.0汉化版， Github地址是   linuxdash 的汉化版 https://github.com/NoBey/linuxdashzh    安装Git和Python     省略   通过Git安装Linux Dash     git clone https://github.com/NoBey/linuxdashzh.git   修改运行端口     v",
			"link": "install-linux-dash"
		},
		{
			"title": "OpenCpu使用笔记",
			"tag": "且听秋谷,R语言",
			"create": "2017-06-08 10:09",
			"update": "2018-05-23 18:50",
			"mini": " 前言 Opencpu 能够将 R package 变成 Web API，以此供其他语言的程序调用   安装       Requires Ubuntu 16.04 (Xenial)     sudo addaptrepository y ppa:opencpu/opencpu2.0     sudo aptget update      sudo aptget upgrade      Installs OpenCPU server     sudo aptget install y opencpuserver      Done! Open http://yourhost/ocpu in ",
			"link": "opencpu-learn-note"
		}
	]
}