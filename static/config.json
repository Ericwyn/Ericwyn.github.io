{
	"head": "Ericwyn's Blog",
	"introduce": "Coding myself",
	"github": "http://github.com/Ericwyn",
	"mail": "Coding myself",
	"domain": "https://blog.meetwhy.com",
	"articles": [
		{
			"title": "Spring-Boot魔改为 Spring-Cloud项目实践",
			"tag": "SpringBoot,SpringCloud",
			"create": "2018-10-08 23:01",
			"update": "2018-10-08 23:45",
			"mini": " 前言 最近接触到了 Spring Cloud ，虽然还没有正式的在生产环境当中使用，但是那种尽量将一个大的整体才分成小的模块的这种想法，让我不明觉历。恰好最近实训当中写的项目是基于 Spring Boot 的，于是打算魔改成一个简单的 Spring Cloud 项目。也天生 Spring Boot 就和 Spring Cloud 无痛融合。   关于微服务 简单的理解和学习了Spring Cloud 和所谓微服务的概念之后，有了以下一些对微服务的个人理解   1，微服务以服务为核心 从前我们可",
			"link": "spring-boot-to-spring-cloud"
		},
		{
			"title": "Spring Boot全局统一异常处理",
			"tag": "SpringBoot",
			"create": "2018-10-04 18:37",
			"update": "2018-10-04 18:45",
			"mini": " 前言 之前用 Spring Boot 写 RESTful API 的时候，对于各种错误的捕捉都是直接用 try catch 的，所以在各个方法里面都总是有一些相同的 try catch 代码块，虽然也是能用但是总有点别扭不自在。这两天学习了一下 Spring Boot 当中对于异常的统一处理，发现很简单但是却能让代码优雅不少。   定义自定义异常 不多累述  ``` public class JsonParseException extends Exception {      private",
			"link": "springBootGolbalExpHandle"
		},
		{
			"title": "Spring Boot当中使用自定义注解",
			"tag": "SpringBoot",
			"create": "2018-09-30 12:46",
			"update": "2018-09-30 12:46",
			"mini": " 前言 自定义注解算是 Java 这门语言当中我非常喜欢的特性了，因为它能够实实在在的提高开发效率，简化代码而不失可读性。之前仅仅在写入门级 ORM 框架的时候使用过，这两天开发新的项目，看到dalao们在Spring Boot 当中使用自定义注解来完成各种事务，立马就学习了一下   环境   Spring Boot 2.0.5.RELEASE   目标 我们希望使用对于方法的注解，来为该方法加入请求鉴权，增加 RESTful API 的安全性   注解定义 使用 `public @interf",
			"link": "spring-boot-custom-annotation"
		},
		{
			"title": "使用 Jenkins 自动构建项目",
			"tag": "Server,且听秋谷,jenkins",
			"create": "2018-09-07 16:43",
			"update": "2018-09-07 16:57",
			"mini": " 前言 公司项目开发到后期需要放到服务器上面去运行测试，但是不想每次都在本地编译成 jar 之后传到服务器再运行，于是使用 Jenkins 来完成这些步骤   安装 jenkins           需要先安装 java     apt install softwarepropertiescommon     addaptrepository ppa:webupd8team/java     aptget update     aptget install oraclejava8install",
			"link": "jenkinsSetting"
		},
		{
			"title": "鹊桥仙 | 七夕",
			"tag": "古月言说",
			"create": "2018-08-17 22:30",
			"update": "2018-08-18 11:59",
			"mini": "\u003cbr\u003e          彩云鹊影，双星同聚，照世间痴儿女         相逢一度誓山河 ，谁能料，别离意趣                  劝君不如，太白甄起，忘却情愁思绪         料想人间姻缘事，也只是，红绳牵与  \u003cbr\u003e  丁酉年七月初七晚 孑然填就",
			"link": "201877"
		},
		{
			"title": "iMCPortal-连接过程解析及Golang实现",
			"tag": "且听秋谷,Golang,爬虫",
			"create": "2018-07-18 16:45",
			"update": "2018-07-19 22:43",
			"mini": " 0 前言  最近学校之前开通了 iMC Portal 无线网络, 只是每次都要开启浏览器才可以登录, 并且需要一直开着一个标签, 这是件很麻烦的事情, 而且最近 (20180711) 发现会出现每隔 15 分钟就断线一次的问题, 所以希望通过抓包来了解连接的过程,之后使用 java 或者其他语言实现模拟登录, 并且在断线之后自动重连   1 协议解析  1.1 获取 cookie 访问学校 iMC portal 页面之后会发现有以下的一些页面请求       d         开启 DEBUG 日志打印     o          强制退出之前登录的帐号, 确保帐号已下线, 也要求输入正",
			"link": "iMCPortal"
		},
		{
			"title": "Norcia文档",
			"tag": "且听秋谷,Norcia",
			"create": "2018-05-22 20:25",
			"update": "2018-05-22 20:25",
			"mini": " Norcia 一个简单的静态博客框架   项目结构   根目录下的 HTML \\ CSS \\ JavaScript 文件   `document` 文件夹用来存放博文 markdown 文件   config.json 作为静态博客的配置文件以及博客文章索引,该文件在初次设定好个人信息后可由 Norcia 程序自动更新与维护, 详情请看下文介绍    config.json 自动更新  更新 运行 Norcia 程序就可以自动依照 document 文件夹里面的 markdown 文件的修改, 而自动维护更新 config.json 索引了  Norcia 为以下三个平台提供打包好的二进制程",
			"link": "norcia-document"
		},
		{
			"title": "markdown测试文档",
			"tag": "且听秋谷,Norcia",
			"create": "2018-05-21 19:02",
			"update": "2018-05-23 15:31",
			"mini": " 前言 这是一份Markdown 测试文档，用来测试 Norcia 对 markdown 文件的加载和显示   主要内容 \u003e  Markdown是什么？ \u003e  谁创造了它？ \u003e  为什么要使用它？ \u003e  怎么使用？ \u003e  谁在用？ \u003e  尝试一下   正文  1. Markdown是什么？ Markdown是一种轻量级标记语言，它以纯文本形式(*易读、易写、易更改*)编写文档，并最终以HTML格式发布。     Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。       2. 谁创造了它？ 它由合并成为其合伙人。     2010年创立求进会（Dema",
			"link": "markdown-test"
		},
		{
			"title": "毕业惜别自题四首",
			"tag": "古月言说",
			"create": "2018-04-23 19:52",
			"update": "2018-07-19 22:16",
			"mini": " 序 16年中时候某天中午看到他们搬校区，又看到公众号上写满离愁别恨，那时候还年轻所以也不知道什么，只是就着假想的离别心情写了几行字，这就是第一首诗的由来。眨眼间却忽然发现已经到了自己的师兄毕业和离开的时候了。   其（一）           淅水荷花今又红                   年华易逝总匆匆                   只欲为君折赠远                   相逢仍记旧音容   其（二）           骊歌今日对苍穹                   而后青山隔万重                   杯酒浮沉且饮尽               ",
			"link": "graduate-1804"
		},
		{
			"title": "Markmobi开发记录",
			"tag": "且听秋谷",
			"create": "2018-04-05 16:34",
			"update": "2018-05-23 14:44",
			"mini": " 前言 自己使用 Kindle 已经有好几年的历史了，从高中时期看各种古文，后来一口气的看一大堆小说，再到后来看看一些技术书籍，而最近发现 Kindle 的另外一个用处就是看 Github 上面的一些电子书籍。  Github 上面是有很多的技术书籍的，因为 Github 有着开放和包容的特性，所以很多的人会翻译各种技术专业的文档或者相关的书，并变成一个 repo ，后续不断更新和提交。从这看来，Github 其实像是一个大的书库。另外哪怕不是书籍，Github 上面也有很多可能并不太适合在电脑上面阅读的 README，以及那种超长的那种项目文档。某天我翻阅的时候，忽然发现或许拿 Kindle",
			"link": "Markmobi"
		},
		{
			"title": "腾讯云CVM安装Win10",
			"tag": "且听秋谷",
			"create": "2018-03-14 22:12",
			"update": "2018-05-23 15:24",
			"mini": "前言 遇到一个奇怪的需求,某个软件只能在win10上面运行,而在win server 环境下会迷幻出错,本身租用了一台腾讯云CVM 想着拿来做运算,结果gg了,无奈之下只能尝试安装系统为 Win10.这里吐槽一下,为毛各个云服务器厂商就是不提供win10系统呢(难道是因为要付费么   准备工作   你的CVM 必须是安装了 windows server 某个版本的(推荐2016版本,毕竟与win10 同一世代   在腾讯云上下载了 win10 的安装镜像iso   备份了驱动     这里额外说一下驱动备份,起初我天真地认为 驱动精灵就能够解决,后面发现驱动精灵居然不支持server 系统..",
			"link": "install-win10-in-tencent-cvm"
		},
		{
			"title": "使用Jitpack发布Github项目",
			"tag": "且听秋谷",
			"create": "2018-02-10 17:24",
			"update": "2018-05-23 15:22",
			"mini": " 前言 使用 Jitpack 能够很方便的把自己一些 java 的库打包成 jar 发布，并且可以在新项目当中使用 maven 引入，实在是很方便，以下是我一些关于 使用 Jitpack 发布 Github 项目的实践   IDE   intellij IDEA   gradle      gradle install  然后会看到生成的`.gradle`文件夹   gradle.build  在项目根目录下新建一个 `gradle.build`文件，基础配置如下      //配置 java plugin     apply plugin: 'java'     //配置生成的jar 名称和",
			"link": "jitpack-use"
		},
		{
			"title": "金缕曲 | 廿一岁生辰留记",
			"tag": "古月言说",
			"create": "2018-01-01 00:00",
			"update": "2018-07-27 19:04",
			"mini": "         今廿年驰隙         换星霜，几人知道，几多如意         洒泪凌波痴梦碎，究竟红笺谁寄         常辗转，辛艰不已         始道人生需患难，怨从前年少轻磨砺         留旧愿，仍相系                  恍惚冬尽春来矣         未觉察，栏前病树，绿芽新立         知晓沉舟留侧畔，自在当逾千里         勤艺业，才为长计         如是修身终不枉，对孤觞几度空零涕         路漫漫，自不易 ",
			"link": "birth21"
		},
		{
			"title": "R package 打包记录",
			"tag": "R语言,且听秋谷",
			"create": "2017-10-13 18:15",
			"update": "2018-05-23 15:27",
			"mini": " 设定工作文件目录 打包R package 要求两个目录 分别是    工作目录 （存放 R 代码）          mkdir /home/ericwyn/work            包目录 （存放包）          mkdir /home/ericwyn/Rlibs    默认情况下在mydir是找不到mylib下的包的，因为mylib不在包的搜索路径里，解决这个问题只需要在mydir新建一个文 件`.Rprofile`文件，里面写上：`.libPaths(“/home/wentrue/Rlibs”)`即可。这样在mydir运行R脚本或启动R终 端，mylib就会被添加到包搜索路",
			"link": "auto-package-of-r"
		},
		{
			"title": "Ubuntu Server 14.04 安装状态监控Linux Dash",
			"tag": "Server,且听秋谷",
			"create": "2017-06-16 19:49",
			"update": "2018-05-23 18:48",
			"mini": " 介绍 Linux Dash是一款非常简单的服务器监控程序，可以通过python、php以及LAMP部署运行，此次安装的环境是Ubuntu Server 14.04 LTS,使用Linux Dash的版本是github上面一个同学的2.0汉化版， Github地址是   \u003elinuxdash 的汉化版 \u003ehttps://github.com/NoBey/linuxdashzh    安装Git和Python     省略   通过Git安装Linux Dash     git clone https://github.com/NoBey/linuxdashzh.git   修改运行端口    ",
			"link": "install-linux-dash"
		},
		{
			"title": "OpenCpu使用笔记",
			"tag": "且听秋谷,R语言",
			"create": "2017-06-08 10:09",
			"update": "2018-05-23 18:50",
			"mini": " 前言 Opencpu 能够将 R package 变成 Web API，以此供其他语言的程序调用   安装       Requires Ubuntu 16.04 (Xenial)     sudo addaptrepository y ppa:opencpu/opencpu2.0     sudo aptget update      sudo aptget upgrade      Installs OpenCPU server     sudo aptget install y opencpuserver      Done! Open http://yourhost/ocpu in ",
			"link": "opencpu-learn-note"
		},
		{
			"title": "金缕曲 | 弱冠生辰留记",
			"tag": "古月言说",
			"create": "2017-01-01 19:20",
			"update": "2018-07-27 19:22",
			"mini": "        虚度韶华否。到如今，二十秋尽，几寻回首。         儿语高明桑梓处，不记当时年幼。对残灯，重慈影瘦。         此后求学游禅桂，幸两三师友同携手。         洒笔墨，纸笺旧。                   人生数度别离久。与寒窗，羊城春媚，又来消受。         四五光景新添上，路远羁途随后。仅如愿，初心相守。         且看尘涛风月送，纵逍遥些许能够。         亦不枉，湿衣袖。  丙申猴年 生辰夜，写就于家中卧室床头书桌之上  重慈影瘦",
			"link": "birth2017"
		},
		{
			"title": "御街行 | 记得当日长亭外",
			"tag": "古月言说",
			"create": "2016-08-10 19:09",
			"update": "2018-07-27 19:09",
			"mini": "        记得当日长亭外，怒马春衫在。         而今重聚过飞尘，依旧从前气概。         金樽未满，羽觞凌月，欢语仍一再                   相逢不料别离快，遗恨填沧海。         鲤鱼鸿雁劝知足，勿把思愁轻载。         江湖相忘，千山隔阻，不愿初心改。   2016.08.10 此日深夜，凌晨时分，困倦之中填就",
			"link": "GoodbyeMug"
		},
		{
			"title": "青玉案 | 醒来夜半香飘散",
			"tag": "古月言说",
			"create": "2016-05-20 00:00",
			"update": "2018-07-27 19:24",
			"mini": "    醒来夜半香飘散，     断肠处，终虚幻。     梦里几回卮酒满。     料知今日，只余空叹，君我薄缘断。           无灯白月窗前漫。     落地如霜、惹心颤。     月下谁曾姣面婉。     花残风冷，竹灰星暗，枕畔空名唤。  ",
			"link": "middleOfTheNight"
		},
		{
			"title": "古风 | 十九岁生辰自题",
			"tag": "古月言说",
			"create": "2016-01-01 00:00",
			"update": "2018-07-27 19:23",
			"mini": "        二九年华慢挥毫         闲观风月送尘涛         寻梦不知身是客         竹庐檐下雨潇潇 ",
			"link": "birth2016"
		},
		{
			"title": "古风  | 逢中秋独坐寄乡",
			"tag": "古月言说",
			"create": "2015-09-27 19:27",
			"update": "2018-07-27 19:27",
			"mini": "        玉盘如故碧苍穹         千古悲欢聚散空         客路不识杯酒趣         吾乡今夜月朦胧   2015年9月27日 中秋之夜  应吐槽之外邀约，零丁而作 ",
			"link": "midAutumn2015"
		},
		{
			"title": "古风 | 月夜和潮归",
			"tag": "古月言说",
			"create": "2015-03-03 19:17",
			"update": "2018-07-27 19:17",
			"mini": "        游子乘潮家未回         十年风雨两相随         又见月明潮万里         箫声如故喝潮归  人都该有故乡的温柔",
			"link": "backHome"
		},
		{
			"title": "对联 | 题壁一联",
			"tag": "古月言说",
			"create": "2015-03-03 19:13",
			"update": "2018-07-27 19:13",
			"mini": "        斑鬓白须几载疏窗伴误身儒冠         彩英紫苑一朝寒枕随憔赋招魂",
			"link": "couplet201607"
		}
	]
}